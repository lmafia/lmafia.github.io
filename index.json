[{"categories":["life"],"content":"这篇记录详细描述了我从购买域名到配置博客的全过程, 包括选择域名, 注册步骤, DNS 设置及博客平台配置等关键环节. 旨在帮助读者了解每一步的具体操作, 为他们的博客创建提供参考. 这里感谢下赛博佛祖: Cloudfalre ","date":"2024-09-22","objectID":"/configure-domain/:0:0","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#"},{"categories":["life"],"content":" 选择方案因为在国内域名要备案, 秉承着 INTP 的懒人思想, 能避免麻烦就避免选择了在国外注册域名, 当然也想着为以后能做点海外的产品或者网站先铺铺路. 通过 Google 和询问了群里的大佬, 一般都是在哪里购买域名, 推荐是 Cloudflare namecheap 对比了下 2 个价格, namecheap 会便宜些, 所以就通过 namecheap 注册了 ","date":"2024-09-22","objectID":"/configure-domain/:1:0","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#选择方案"},{"categories":["life"],"content":" 选择域名我一直以来用的 AKA 或者网名都是: L_MaFia , 根据 lmafia 搜索,哪个便宜买哪个, 比如 .info, .xyz, .life 啥的. .info 一年只需要 $2.4 左右, 注意购买的时候最好关闭自动续费,一般续费价格就不划算了,我也当做是练手,可能不一定会使用超过一年时间. ","date":"2024-09-22","objectID":"/configure-domain/:2:0","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#选择域名"},{"categories":["life"],"content":" 支付方式namecheap 支持使用 Visa, PayPal 一些常用的国外支付方式, 这也应该难倒了不少网友了,如果我没有 Visa 卡, 全币卡咋办？ 其实,PayPal 是可以关联咱们的银联的储蓄卡的,这次购买一年的域名的花费总购不在 27RMB. 我选择了一张基本不使用的建设银行的储蓄卡,但是在付费扣款时一直出现失败 询问了群里的大佬,应该是有踩坑的经验: 国内一些银联卡可能会无法支付,他是用招商银行的卡支付的 我记得我本科的时候,使用 PayPal 购买过 DigitalOcean 的服务器时用过工行卡,想着还是听大佬的先试试看,为了保险起见的话,打不了支付成功后再解绑即可. 实测下来: 建设银行-无法支付 招商银行-成功支付 ","date":"2024-09-22","objectID":"/configure-domain/:3:0","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#支付方式"},{"categories":["life"],"content":" 让域名指向博客我的博客是用 Hugo 搭建的纯静态的网站,白嫖了 Vercel 和 GithPage, 体验下来 Vercel 的访问速度会好些,当然我后续我可能会尝试白嫖 Cloudflare Pages ","date":"2024-09-22","objectID":"/configure-domain/:4:0","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#让域名指向博客"},{"categories":["life"],"content":" Cloudfalre 添加域名cf-domain-add ","date":"2024-09-22","objectID":"/configure-domain/:4:1","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#cloudfalre-添加域名"},{"categories":["life"],"content":" Cloudflare 的免费 SSL想用 HTTPS 就避免不了需要使用 SSL,不仅因为安全考虑,还有如果需要一些域名解析指向应用服务平台,平台也会一定的安全要求 ,Cloudflare 免费提供了 SSL 够我们开发者的博客内容使用了 cf-domain-ssl 一定要选择 Strict , 不然 Vercel 是不会给是指向过去的 ","date":"2024-09-22","objectID":"/configure-domain/:4:2","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#cloudflare-的免费-ssl"},{"categories":["life"],"content":" Cloudfalre 提供 DNS 服务cf-domain-dns ","date":"2024-09-22","objectID":"/configure-domain/:4:3","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#cloudfalre-提供-dns-服务"},{"categories":["life"],"content":" Namecheap 配置 DNSNamecheap 提供也 DNS 了,但是因为我们需要 白嫖 SSL 所以需要修改下 DNS 服务列表 Namecheap 提供的教程: How to set up DNS records for your domain in a Cloudflare account 看其中的第三和第四步,大概也就了解了 配置好这个之后,可以说我们的域名就可以交给 Cloudfalre 来 「管理」 了 ","date":"2024-09-22","objectID":"/configure-domain/:4:4","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#namecheap-配置-dns"},{"categories":["life"],"content":" Cloudfalre 添加 DNS Record这一步就是给用户访问域名的时候, 需要浏览到我们的具体网页地址上 这里我添加了一个 CNAME 规则 CNAME: 域名解析为另外一个域名 cf-domain-dns-cname 当我输入浏览器输入: blog.lmafia.info 时, 会解析到目标地址: Vercel 的博客域名 ","date":"2024-09-22","objectID":"/configure-domain/:4:5","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#cloudfalre-添加-dns-record"},{"categories":["life"],"content":" Vercel 域名添加配置最后一步就是在 Vercel 给我们博客项目配置域名 我们一直配置好 Cloudfalre 到 Vercel 的单向的配置了 我估计是 Vercel 因为安全原因,还需要配置这个域名并会自动验证 验证可用会有 2 个 ✅ 出现 vercel-domain-add ","date":"2024-09-22","objectID":"/configure-domain/:4:6","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#vercel-域名添加配置"},{"categories":["life"],"content":" 完成配置接下来, 让我们通过域名访问下该站点吧: https://blog.lmafia.info 成功访问! 恭喜,我们已经完成了给我们的博客配置一个属于自己的域名啦! ","date":"2024-09-22","objectID":"/configure-domain/:5:0","series":null,"tags":["content"],"title":"域名购买到博客配置的过程记录","uri":"/configure-domain/#完成配置"},{"categories":["life"],"content":"我的第一篇想要输出的博客内容应该是在大四的时候，那时候应该 COVID-19，都困在家里完成毕业设计和毕业论文。 ","date":"2023-09-29","objectID":"/first-page/:0:0","series":null,"tags":["content"],"title":"第一篇博客","uri":"/first-page/#"},{"categories":["life"],"content":" 为什么创建博客主要是因为我没有博客, 所以我想搭一个, 哈哈哈. 我的第一篇想要输出的博客内容应该是在大四的时候，那时候应该 COVID-19，都困在家里完成毕业设计和毕业论文。 那会的毕业设计算是接了一个坑，是一个 ROS+SLAM 的机器人，老师给了我一个没有任何中文资料的激光雷达，我又去买了一个刚出树莓派 4B 来做系统。 当时的中文资料比较有限，只能靠着自己摸索，和翻墙找资料，最后一点一点填出来。我当时想着既然没有啥中文资料，那不如自己写一个，就在 CSDN 上发了一篇关于在树莓派 4B 搭建 ROS 的博客。 后来毕业之后，就转岗到 Java 开发了，完全从零基础就要上工的过程真的很痛苦，因为我也不是科班的，当时就花钱买了一个网上的培训课程，一心想着学成之后离开那家公司。 当时上课做的笔记，自己总结一下就放到了 CSDN 上，主要是一种炫耀的心情吧，我自己认为最重要的原因就是想放在简历上，可以让面试官觉得自己稍微有点技术追求之类的。 现在的 CSDN 已经在国内的技术圈子里开始臭名昭著了，所以我也不太愿意在上面发东西了。所以后面工作和业余的记录就通过 Typroa 写完上传到 Github 上。 后来就一直用 markdown 记录，不过创建目录、文件应该放在什么位置，对我来说需要耗费心力的事情，我又是一个又懒又拖延的人，这样会让我不愿意去记录东西。后来在网上就刷到了双链笔记的相关文章，非常火的是 notion ，主要我觉得因为它对网络有一定要求，所以不是很喜欢。我还是更希望自己用一个纯本地的文本编辑: obsidian 和 logseq，其实都能满足我的需求了，最后是因为 UI ，选了我自己认为比较轻便的 logseq 。 就这样，我就在 2022 年底，我过上了几乎每天都在记录的日子，记录自己的想法，自己的读书笔记，记录看技术文章或技术视频，记录看到的推文… 1 2 3 随着记录不断增多，让我觉得我可能又只是在做一个小松鼠而已，自己的思考和总结并没有很大的提升。我一昧的记录，对我吸收知识帮助不是特别大。 最近因为尝试把学习练手 Vue3 的静态网站搭建在 Gitub Pages 上，发现并不难。所以想自己尝试把自己的博客搭建起来，通过写博文的方式，让自己有动力去把日常记录的内容总结一下。 ","date":"2023-09-29","objectID":"/first-page/:1:0","series":null,"tags":["content"],"title":"第一篇博客","uri":"/first-page/#为什么创建博客"},{"categories":["life"],"content":" 技术选型","date":"2023-09-29","objectID":"/first-page/:2:0","series":null,"tags":["content"],"title":"第一篇博客","uri":"/first-page/#技术选型"},{"categories":["life"],"content":" 开源博客 Hexo Hugo VuePress VitePress 主要是想体验一下不同的技术，所以选择了基于 go 的 hugo ","date":"2023-09-29","objectID":"/first-page/:2:1","series":null,"tags":["content"],"title":"第一篇博客","uri":"/first-page/#开源博客"},{"categories":["life"],"content":" 服务器直接白嫖 GitHub Pages ","date":"2023-09-29","objectID":"/first-page/:2:2","series":null,"tags":["content"],"title":"第一篇博客","uri":"/first-page/#服务器"},{"categories":["life"],"content":" 编辑器Visual Studio Code 它真的非常适合，既能装 markdown 插件，又能作为 Git 的可视化，还能有 terminal 来方便我们敲命令。 ","date":"2023-09-29","objectID":"/first-page/:2:3","series":null,"tags":["content"],"title":"第一篇博客","uri":"/first-page/#编辑器"},{"categories":["life"],"content":" 需要会什么折腾技术的最不怕不会任何东西， 应该都会有一颗保持好奇的心， 学习应该算是一件比较简单的事情啦， 又加上搜索引擎， 甚至用上如同 ChatGPT 这种的 AI 工具， 还是能解决我们大部分学习需求的吧。 Git: 毕竟要用到 Github, 而且有一定的版本管理还能方便咱们回溯内容 Shell 命令: 安装 ","date":"2023-09-29","objectID":"/first-page/:3:0","series":null,"tags":["content"],"title":"第一篇博客","uri":"/first-page/#需要会什么"},{"categories":["life"],"content":"详细介绍如何在 SpringBoot 项目中集成 LangChain4J，实现 AI 能力","date":"2025-02-20","objectID":"/springboot-langchain4j/","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/"},{"categories":["life"],"content":" 简介LangChain4j 是一个强大的 Java AI 开发框架，它可以帮助我们快速构建基于大语言模型的应用。本文将详细介绍如何在 SpringBoot 项目中集成 LangChain4J，并实现一个简单的 AI 聊天应用。 ","date":"2025-02-20","objectID":"/springboot-langchain4j/:1:0","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#简介"},{"categories":["life"],"content":" 项目架构graph TD A[SpringBoot Application] --\u003e B[LangChain4J Config] B --\u003e C[ChatLanguageModel] B --\u003e D[MessageMemory] C --\u003e E[OpenAI API] A --\u003e F[ChatService] F --\u003e C F --\u003e D A --\u003e G[ChatController] G --\u003e F style A fill:#f9f,stroke:#333,stroke-width:2px style B fill:#bbf,stroke:#333,stroke-width:2px style C fill:#dfd,stroke:#333,stroke-width:2px style D fill:#dfd,stroke:#333,stroke-width:2px style E fill:#fdd,stroke:#333,stroke-width:2px ","date":"2025-02-20","objectID":"/springboot-langchain4j/:2:0","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#项目架构"},{"categories":["life"],"content":" 环境准备 JDK 17+ SpringBoot 3.x Maven/Gradle OpenAI API Key ","date":"2025-02-20","objectID":"/springboot-langchain4j/:3:0","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#环境准备"},{"categories":["life"],"content":" 项目配置","date":"2025-02-20","objectID":"/springboot-langchain4j/:4:0","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#项目配置"},{"categories":["life"],"content":" Maven 依赖首先在 pom.xml 中添加必要的依赖： xml \u003cdependencies\u003e \u003c!-- SpringBoot 基础依赖 --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-web\u003c/artifactId\u003e \u003c/dependency\u003e \u003c!-- LangChain4j 核心依赖 --\u003e \u003cdependency\u003e \u003cgroupId\u003edev.langchain4j\u003c/groupId\u003e \u003cartifactId\u003elangchain4j\u003c/artifactId\u003e \u003cversion\u003e0.27.1\u003c/version\u003e \u003c/dependency\u003e \u003c!-- LangChain4j Spring 集成 --\u003e \u003cdependency\u003e \u003cgroupId\u003edev.langchain4j\u003c/groupId\u003e \u003cartifactId\u003elangchain4j-spring-boot-starter\u003c/artifactId\u003e \u003cversion\u003e0.27.1\u003c/version\u003e \u003c/dependency\u003e \u003c!-- Lombok --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.projectlombok\u003c/groupId\u003e \u003cartifactId\u003elombok\u003c/artifactId\u003e \u003coptional\u003etrue\u003c/optional\u003e \u003c/dependency\u003e \u003c/dependencies\u003e ","date":"2025-02-20","objectID":"/springboot-langchain4j/:4:1","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#maven-依赖"},{"categories":["life"],"content":" 配置文件在 application.yml 中添加相关配置： yaml langchain4j: chat-model: provider: openai api-key: ${OPENAI_API_KEY} model-name: gpt-4 temperature: 0.7 timeout: 60s base-url: https://your-gpt4-mini-api-endpoint # 如果使用自定义 API ","date":"2025-02-20","objectID":"/springboot-langchain4j/:4:2","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#配置文件"},{"categories":["life"],"content":" 核心实现","date":"2025-02-20","objectID":"/springboot-langchain4j/:5:0","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#核心实现"},{"categories":["life"],"content":" 项目结构 bash src/main/java/com/example/demo/ ├── config/ │ └── LangChain4jConfig.java ├── service/ │ ├── ChatService.java │ └── PromptService.java ├── controller/ │ └── ChatController.java ├── model/ │ ├── ChatRequest.java │ └── ChatResponse.java └── DemoApplication.java ","date":"2025-02-20","objectID":"/springboot-langchain4j/:5:1","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#项目结构"},{"categories":["life"],"content":" 配置类 java @Configuration @Slf4j public class LangChain4jConfig { @Value(\"${langchain4j.chat-model.api-key}\") private String apiKey; @Value(\"${langchain4j.chat-model.base-url}\") private String baseUrl; @Bean public ChatLanguageModel chatLanguageModel() { return OpenAiChatModel.builder() .apiKey(apiKey) .modelName(\"gpt-4\") .baseUrl(baseUrl) .timeout(Duration.ofSeconds(60)) .temperature(0.7) .logRequests(true) .logResponses(true) .build(); } @Bean public MessageMemory messageMemory() { return MessageMemory.withMaxMessages(10); } } ","date":"2025-02-20","objectID":"/springboot-langchain4j/:5:2","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#配置类"},{"categories":["life"],"content":" 服务实现 java @Service @Slf4j public class ChatService { private final ChatLanguageModel chatModel; private final MessageMemory memory; public ChatService(ChatLanguageModel chatModel, MessageMemory memory) { this.chatModel = chatModel; this.memory = memory; } public String chat(String userMessage) { try { memory.add(UserMessage.from(userMessage)); String response = chatModel.generate(memory.messages()); memory.add(AiMessage.from(response)); return response; } catch (Exception e) { log.error(\"AI 服务调用失败\", e); throw new AIException(\"AI 服务暂时不可用，请稍后重试\"); } } } ","date":"2025-02-20","objectID":"/springboot-langchain4j/:5:3","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#服务实现"},{"categories":["life"],"content":" 高级特性","date":"2025-02-20","objectID":"/springboot-langchain4j/:6:0","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#高级特性"},{"categories":["life"],"content":" 对话流程 sequenceDiagram participant Client participant Controller participant ChatService participant OpenAI Client-\u003e\u003eController: POST /api/chat Controller-\u003e\u003eChatService: chat(message) ChatService-\u003e\u003eChatService: 添加用户消息到记忆 ChatService-\u003e\u003eOpenAI: 生成回复 OpenAI--\u003e\u003eChatService: 返回回复 ChatService-\u003e\u003eChatService: 添加 AI 回复到记忆 ChatService--\u003e\u003eController: 返回回复 Controller--\u003e\u003eClient: 返回响应 note over Client,OpenAI: 完整的对话流程 ","date":"2025-02-20","objectID":"/springboot-langchain4j/:6:1","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#对话流程"},{"categories":["life"],"content":" Prompt 模板使用 java @Service public class PromptService { private final PromptTemplate promptTemplate = PromptTemplate.from( \"你是一个{{role}}，请用专业的角度回答：{{question}}\" ); private final ChatLanguageModel chatModel; public String getResponse(String role, String question) { String prompt = promptTemplate.apply(Parameters.from( \"role\", role, \"question\", question )); return chatModel.generate(prompt); } } ","date":"2025-02-20","objectID":"/springboot-langchain4j/:6:2","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#prompt-模板使用"},{"categories":["life"],"content":" 最佳实践 API Key 安全性 使用环境变量或配置中心存储 API Key 避免直接在代码中硬编码敏感信息 定期轮换 API Key 性能优化 使用异步处理长时间运行的 AI 请求 实现请求缓存减少 API 调用 合理设置超时时间和重试策略 成本控制 实现 Token 计数和使用统计 设置调用限额 监控 API 调用成本 ","date":"2025-02-20","objectID":"/springboot-langchain4j/:7:0","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#最佳实践"},{"categories":["life"],"content":" 常见问题 如何处理 API 超时？ 建议设置合理的超时时间，并实现重试机制： java @Retryable( value = {TimeoutException.class}, maxAttempts = 3, backoff = @Backoff(delay = 1000) ) public String chatWithRetry(String message) { return chatService.chat(message); } ","date":"2025-02-20","objectID":"/springboot-langchain4j/:8:0","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#常见问题"},{"categories":["life"],"content":" 总结通过本文的介绍，我们学习了如何在 SpringBoot 项目中集成 LangChain4J，实现了一个基础的 AI 聊天应用。主要包括： 基础配置和依赖管理 核心功能实现 高级特性使用 性能优化和监控 安全性考虑 在实际开发中，建议根据具体需求选择合适的功能特性，同时注意安全性、性能和成本控制等方面的考虑。 ","date":"2025-02-20","objectID":"/springboot-langchain4j/:9:0","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#总结"},{"categories":["life"],"content":" 参考资料 LangChain4j 官方文档 SpringBoot 官方文档 OpenAI API 文档 ","date":"2025-02-20","objectID":"/springboot-langchain4j/:10:0","series":null,"tags":["content"],"title":"在 SpringBoot 中接入 LangChain4J 开发指南","uri":"/springboot-langchain4j/#参考资料"},{"categories":null,"content":" 我是谁Hi, 我是 Kyle 目前从事软件开发, 接触过数字城市、海外广告和智能家居 欢迎大家找我一起玩 后端 Java Spring Boot, Spring Cloud Maven, Gradle Mybatis, Mybatis Plus MySQL, Redis Kafka, Pulsar, RabbitMQ 前端 Vue3 Tailwind CSS HTML5 CSS3 DevOps Docker Git, GitHub, GitLab Jenkins Grafana 开发工具 IDEA VS Code Postman ","date":"2023-09-29","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于","uri":"/about/#我是谁"},{"categories":null,"content":" 我是谁Hi, 我是 Kyle 目前从事软件开发, 接触过数字城市、海外广告和智能家居 欢迎大家找我一起玩 后端 Java Spring Boot, Spring Cloud Maven, Gradle Mybatis, Mybatis Plus MySQL, Redis Kafka, Pulsar, RabbitMQ 前端 Vue3 Tailwind CSS HTML5 CSS3 DevOps Docker Git, GitHub, GitLab Jenkins Grafana 开发工具 IDEA VS Code Postman ","date":"2023-09-29","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于","uri":"/about/#后端"},{"categories":null,"content":" 我是谁Hi, 我是 Kyle 目前从事软件开发, 接触过数字城市、海外广告和智能家居 欢迎大家找我一起玩 后端 Java Spring Boot, Spring Cloud Maven, Gradle Mybatis, Mybatis Plus MySQL, Redis Kafka, Pulsar, RabbitMQ 前端 Vue3 Tailwind CSS HTML5 CSS3 DevOps Docker Git, GitHub, GitLab Jenkins Grafana 开发工具 IDEA VS Code Postman ","date":"2023-09-29","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于","uri":"/about/#前端"},{"categories":null,"content":" 我是谁Hi, 我是 Kyle 目前从事软件开发, 接触过数字城市、海外广告和智能家居 欢迎大家找我一起玩 后端 Java Spring Boot, Spring Cloud Maven, Gradle Mybatis, Mybatis Plus MySQL, Redis Kafka, Pulsar, RabbitMQ 前端 Vue3 Tailwind CSS HTML5 CSS3 DevOps Docker Git, GitHub, GitLab Jenkins Grafana 开发工具 IDEA VS Code Postman ","date":"2023-09-29","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于","uri":"/about/#devops"},{"categories":null,"content":" 我是谁Hi, 我是 Kyle 目前从事软件开发, 接触过数字城市、海外广告和智能家居 欢迎大家找我一起玩 后端 Java Spring Boot, Spring Cloud Maven, Gradle Mybatis, Mybatis Plus MySQL, Redis Kafka, Pulsar, RabbitMQ 前端 Vue3 Tailwind CSS HTML5 CSS3 DevOps Docker Git, GitHub, GitLab Jenkins Grafana 开发工具 IDEA VS Code Postman ","date":"2023-09-29","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于","uri":"/about/#开发工具"},{"categories":null,"content":" 其他 Ubuntu, CentOS Markdown logseq ","date":"2023-09-29","objectID":"/about/:1:1","series":null,"tags":null,"title":"关于","uri":"/about/#其他"},{"categories":null,"content":" 网站历史2024-09-25: 配置自定义域名 2023-09-29: 通过 Hugo + GithubPages 搭建 ","date":"2023-09-29","objectID":"/about/:2:0","series":null,"tags":null,"title":"关于","uri":"/about/#网站历史"}]